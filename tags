!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC := clang$/;"	m
CC	src/Makefile	/^CC := clang$/;"	m
CC	test/Makefile	/^CC := clang$/;"	m
CFLAGS	Makefile	/^    CFLAGS := $(CFLAGS) $(DEBUG_FLAGS)$/;"	m
CFLAGS	Makefile	/^    CFLAGS := $(CFLAGS) $(t_CFLAGS)$/;"	m
CFLAGS	Makefile	/^    CFLAGS := -Werror $(CFLAGS)$/;"	m
CFLAGS	Makefile	/^CFLAGS := $(FLAGS) $(INC)$/;"	m
CFLAGS	src/Makefile	/^CFLAGS := -Wall -W -ansi$/;"	m
CFLAGS	test/Makefile	/^CFLAGS := -Wall -W -ansi$/;"	m
DEBUG	src/test.h	15;"	d
DEBUG	src/test.h	8;"	d
DEBUG_FLAGS	Makefile	/^DEBUG_FLAGS := -g -ftrapv -fexceptions -D_DEBUG=1$/;"	m
EXE	Makefile	/^EXE := stein$/;"	m
FILES	Makefile	/^FILES := $(FILES)$/;"	m
FILES	Makefile	/^FILES := $(FILES:%.c=src\/%.c)$/;"	m
FILES	src/Makefile	/^FILES := arc_list.c parser.c main.c$/;"	m
FLAGS	Makefile	/^FLAGS := -Wall -W -ansi$/;"	m
INC	Makefile	/^INC := $(INC)$/;"	m
INC	src/Makefile	/^INC :=$/;"	m
LIBS	Makefile	/^LIBS :=$/;"	m
MAKE_DEBUG	Makefile	/^MAKE_DEBUG := 1$/;"	m
MALLOC	src/test.h	10;"	d
MALLOC	src/test.h	16;"	d
MARK	src/test.h	14;"	d
MARK	src/test.h	7;"	d
MM	test/t_parser.c	11;"	d	file:
OBJ	Makefile	/^OBJ := $(FILES:%.c=%.o)$/;"	m
ROOM_BREWERY	src/donjon.h	/^    ROOM_BREWERY$/;"	e	enum:ROOM_TYPE
ROOM_MONSTER	src/donjon.h	/^    ROOM_MONSTER,$/;"	e	enum:ROOM_TYPE
ROOM_ORDINARY	src/donjon.h	/^    ROOM_ORDINARY,$/;"	e	enum:ROOM_TYPE
ROOM_TRAP	src/donjon.h	/^    ROOM_TRAP,$/;"	e	enum:ROOM_TYPE
ROOM_TYPE	src/donjon.h	/^enum ROOM_TYPE$/;"	g
START_TEST	test/t_parser.c	/^START_TEST (test_preprocess)$/;"	f
_TEST_	src/test.h	2;"	d
_arc_list_	src/arc_list.h	2;"	d
_donjon_	src/donjon.h	2;"	d
_parser_	src/parser.h	2;"	d
_t_parser_	test/t_parser.c	2;"	d	file:
add	src/arc_list.c	/^struct arc_list* add(struct arc_list * l, struct arc * node)$/;"	f
arc	src/donjon.h	/^struct arc$/;"	s
arc_list	src/arc_list.h	/^struct arc_list$/;"	s
arcs	src/donjon.h	/^    struct arc_list * arcs;$/;"	m	struct:donjon	typeref:struct:donjon::arc_list
cost	src/donjon.h	/^    int cost;$/;"	m	struct:arc
count_arr	test/t_parser.c	/^int count_arr(void * arr, size_t size)$/;"	f
create_arc	src/donjon.c	/^struct arc * create_arc(const int cost, const int from, const int to)$/;"	f
create_donjon	src/donjon.c	/^struct donjon * create_donjon(const int nb_room, const int * rooms, struct arc_list * arcs)$/;"	f
donjon	src/donjon.h	/^struct donjon$/;"	s
empty_list	src/arc_list.h	16;"	d
from	src/donjon.h	/^    int from;$/;"	m	struct:arc
is_all_eq	test/t_parser.c	/^int is_all_eq (char ** arr1, char ** arr2, int how_many)$/;"	f
is_empty	src/arc_list.h	17;"	d
len	src/arc_list.c	/^size_t len(struct arc_list * l)$/;"	f
main	src/main.c	/^int main (int argc, char const* argv[])$/;"	f
main_test	src/main.c	/^struct donjon * main_test(const char * file)$/;"	f
nb_room	src/donjon.h	/^    int nb_room;$/;"	m	struct:donjon
next	src/arc_list.h	/^    struct arc_list * next;$/;"	m	struct:arc_list	typeref:struct:arc_list::arc_list
node	src/arc_list.h	/^    struct arc * node;$/;"	m	struct:arc_list	typeref:struct:arc_list::arc
parser_suite	src/main.c	/^Suite * parser_suite (void)$/;"	f
rooms	src/donjon.h	/^    int * rooms;$/;"	m	struct:donjon
strfill	src/parser.c	/^char* strfill(char* str, const int len, const char c)$/;"	f
strsep	src/parser.c	/^char** strsep(const char* input, const char[] separators)$/;"	f
t_CFLAGS	Makefile	/^t_CFLAGS := -D_TEST=1 -g $(t_INC)$/;"	m
t_EXE	Makefile	/^t_EXE := $(EXE)_test$/;"	m
t_FILES	Makefile	/^t_FILES := $(t_FILES)$/;"	m
t_FILES	Makefile	/^t_FILES := $(t_FILES:%.c=test\/%.c)$/;"	m
t_FILES	test/Makefile	/^t_FILES :=$/;"	m
t_INC	Makefile	/^t_INC :=$/;"	m
t_LIBS	Makefile	/^t_LIBS := $(LIBS) -lcheck$/;"	m
t_OBJ	Makefile	/^t_OBJ := $(t_FILES:%.c=%.o)$/;"	m
to	src/donjon.h	/^    int to;$/;"	m	struct:arc
